using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using AutoMapper;
using MediatR;
using MicroQuiz.Services.Operations.Core.Enums;
using MicroQuiz.Services.Operations.Core.Events.Operation;
using MicroQuiz.Services.Operations.Core.Events.Operation.Quiz;
using MicroQuiz.Services.Operations.Core.Events.Quiz;
using MicroQuiz.Services.Operations.Core.Extensions;
using MicroQuiz.Services.Operations.Core.Messaging;
using MicroQuiz.Services.Operations.Core.Models;
using MicroQuiz.Services.Operations.Core.Repositories;

namespace MicroQuiz.Services.Operations.Application.EventHandlers
{
    internal class CreateQuizOperationEventHandler : IRequestHandler<CreateQuizOperationEvent>
    {
        private readonly IOperationRepository _operationRepository;
        private readonly IBusPublisher _busPublisher;
        private readonly IMapper _mapper;

        public CreateQuizOperationEventHandler(
            IOperationRepository operationRepository,
            IBusPublisher busPublisher,
            IMapper mapper)
        {
            _operationRepository = operationRepository.ThrowIfNull(nameof(operationRepository));
            _busPublisher = busPublisher.ThrowIfNull(nameof(busPublisher));
            _mapper = mapper.ThrowIfNull(nameof(mapper));
        }

        public async Task<Unit> Handle(CreateQuizOperationEvent request, CancellationToken cancellationToken)
        {
            var exist = _operationRepository.GetAsync(request.OperationId);
            if (exist == null)
            {
                var rejectectedEvent = new OperationRejectedEvent
                {
                    Id = request.OperationId,
                    Reason = "There is an operations with such Id"
                };

                await _busPublisher.PublishAsync(rejectectedEvent);
                return Unit.Value;
            }

            //the operation contains only one step - a quiz creating

            var quizId = Guid.NewGuid();

            var operation = new Operation
            {
                Id = request.OperationId,
                State = OperationState.Pending,
                Steps = new List<Step>
                {
                    new Step
                    {
                        Id = Guid.NewGuid(),
                        EntityId = quizId,
                        RejectEventName = typeof(DeleteQuizEvent).Name,
                        State = OperationState.Pending
                    }
                }
            };

            await _operationRepository.AddAsync(operation);

            //Guid for a new Quiz will be generated by Mapper
            var createQuizEvent = _mapper.Map<CreateQuizEvent>(request);
            createQuizEvent.Id = quizId;
            await _busPublisher.PublishAsync(createQuizEvent);

            return Unit.Value;
        }
    }
}
